# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi


# bash autocomplete compat
autoload -U +X bashcompinit && bashcompinit


# If you come from bash you might have to change your $PATH.
export PATH=/opt/homebrew/bin:$PATH:$HOME/bin:/usr/local/bin:$PATH

# Path to your oh-my-zsh installation.
export ZSH="$HOME/.oh-my-zsh"



# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
#ZSH_THEME="robbyrussell"
ZSH_THEME="powerlevel10k/powerlevel10k"

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in $ZSH/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment one of the following lines to change the auto-update behavior
# zstyle ':omz:update' mode disabled  # disable automatic updates
# zstyle ':omz:update' mode auto      # update automatically without asking
# zstyle ':omz:update' mode reminder  # just remind me to update when it's time

# Uncomment the following line to change how often to auto-update (in days).
# zstyle ':omz:update' frequency 13

# to allow autocompletion with docker with flags `-ti` instead of `-t -i`
zstyle ':completion:*:*:docker:*' option-stacking yes
zstyle ':completion:*:*:docker-*:*' option-stacking yes

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS="true"

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# You can also set it to another string to have that shown instead of the default red dots.
# e.g. COMPLETION_WAITING_DOTS="%F{yellow}waiting...%f"
# Caution: this setting can cause issues with multiline prompts in zsh < 5.7.1 (see #5765)
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startuop.
#
plugins=(git zsh-syntax-highlighting zoxide docker docker-compose fzf command-not-found asdf kubectl kubectx fzf-alias  zsh-autosuggestions fzf-tab ollama helm aliases azure)

# If you have installed completions using Homebrew, 
# its completions may not be on your $FPATH if you are using the system zsh. 
# Homebrew installs zsh completion definitions to /usr/local/share/zsh/site-functions, 
# which will be on $FPATH for the Homebrew-installed zsh, but not for the system zsh. 
# If you want it to work with the system zsh, 
# add this to your ~/.zshrc before it sources oh-my-zsh.sh.
# if (( ! ${fpath[(I)/usr/local/share/zsh/site-functions]} )); then
  # FPATH=/usr/local/share/zsh/site-functions:$FPATH
# fi
if (( ! ${fpath[(I)/opt/homebrew/share/zsh/site-functions]} )); then
  FPATH=/opt/homebrew/share/zsh/site-functions:$FPATH
fi


source $ZSH/oh-my-zsh.sh

RPS1='$(kubectx_prompt_info)'

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

#######################################################################################################
# DHL
#######################################################################################################
export DHL_PARCEL_PLATFORM_DIR=/Users/jgordijn/projects/dhl/dhl-parcel-platform

#######################################################################################################


# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"

alias watch='watch '
alias kar='k --context aks-accept-aks-cl1 --namespace dhl-receiver-services'
alias kad='k --context aks-accept-aks-cl1 --namespace dhl-receiver-dex'
alias kap='k --context aks-accept-aks-cl1 --namespace dhl-ppp'
alias kas='k --context aks-accept-aks-cl1 --namespace dhl-consumer-sender-services'
alias kpr='k --context aks-prod-aks-cl1 --namespace dhl-receiver-services'
alias kpd='k --context aks-prod-aks-cl1 --namespace dhl-receiver-dex'
alias kpp='k --context aks-prod-aks-cl1 --namespace dhl-ppp'
alias kps='k --context aks-prod-aks-cl1 --namespace dhl-consumer-sender-services'


#### eval "$(zoxide init zsh)"

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh


gro () {
    local REMOTE="${1:-origin}"
    local CURRENT_BRANCH=`git branch --show-current`
    local BASE_URL=`git remote get-url "${REMOTE}" | sed 's|\.git$||' | sed -E 's;^(git@|https://);;' | sed 's|:|/|'`
    if [[ $BASE_URL == *"github.com"* ]]
    then
        open "https://${BASE_URL}/tree/${CURRENT_BRANCH}"
    else
        open "https://${BASE_URL}/-/tree/${CURRENT_BRANCH}"\;
    fi
}

# DHL Specifiek
source ~/bin/dhlscripts.sh
export SBT_OPTS="-DuseArm=true -DtargetMultiPlatform=true"
# END DHL


source /Users/jgordijn/.config/broot/launcher/bash/br

source /opt/homebrew/etc/bash_completion.d/az

# >>> scala-cli completions >>>
fpath=("/Users/jgordijn/Library/Application Support/ScalaCli/completions/zsh" $fpath)
compinit
# <<< scala-cli completions <<<


test -e "${HOME}/.iterm2_shell_integration.zsh" && source "${HOME}/.iterm2_shell_integration.zsh"

CACHE_LOCATION="$HOME/.cache"

## Functions to use with azure cloud
cache_command() {
    local cache_name=$1
    shift
    local cache_file="$CACHE_LOCATION/completion_${cache_name}.cache"
    local temp_cache="${cache_file}.tmp"

    # If cache is missing or older than 10 minutes, refresh it
    # if [ ! -f "$cache_file" ] || [ "$(find "$cache_file" -mmin +10 2>/dev/null)" ]; then
    # -mtime +0 means older than 24 hours
    if [ ! -f "$cache_file" ] || [ "$(find "$cache_file" -mtime +0 2>/dev/null)" ]; then
        # Temporarily disable job notifications
        setopt LOCAL_OPTIONS NO_NOTIFY NO_MONITOR

        # Start command in the background
        "$@" > "$temp_cache" 2>/dev/null &
        local pid=$!

        # Save cursor position and move to start of line
        printf "\033[s" >&2  # Save position
        printf "\033[1G" >&2  # Move to column 1

        # Spinner animation
        typeset -i i=0
        local sp="/-\|"
        while kill -0 $pid 2>/dev/null; do
            printf "%c" "${sp[i++%4]}" >&2
            printf "\033[1G" >&2  # Move back to start of line
            command true  # Force flush
            sleep 0.1
        done

        # Clear spinner and restore cursor
        printf "\033[K" >&2   # Clear line
        printf "\033[u" >&2   # Restore position

        # Only replace the cache file if the command was successful
        if wait $pid 2>/dev/null; then
            mv "$temp_cache" "$cache_file"
        else
            rm -f "$temp_cache"
        fi
    fi

    # Print cached results
    cat "$cache_file" 2>/dev/null
}

function reset_cache() {
    if [[ -n "$1" ]]; then
        local cache_file="$CACHE_LOCATION/completion_$1.cache"
        rm -f "$cache_file"
        echo "Cache file for '$1' deleted."
    else
        rm -f "$CACHE_LOCATION"/completion_*.cache
        echo "All cache files deleted."
    fi
}

## Receiver

### Receiver Test
function listTestSecrets() {
    cache_command test_receiver az keyvault secret list --vault-name kv-test-ppp-0001 --query "[].name" -o tsv
}
function showTestSecret() {
    az keyvault secret show --vault-name kv-test-ppp-0001 --name $1 --query value --output tsv
}
function setTestSecret() {
    az keyvault secret set  --name $1 --vault-name kv-test-ppp-0001 --value $2
    reset_cache test_receiver
}

### Receiver Accept
function listAcceptSecrets() {
    cache_command accept_receiver az keyvault secret list --vault-name kv-accept-receiver-0001 --query "[].name" -o tsv
}
function showAcceptSecret() {
    az keyvault secret show --vault-name kv-accept-receiver-0001 --name $1 --query value --output tsv
}
function setAcceptSecret() {
    az keyvault secret set  --name $1 --vault-name kv-accept-receiver-0001 --value $2
    reset_cache accept_receiver
}

### Receiver Prod
function setProdSecret() {
    az keyvault secret set  --name $1 --vault-name kv-prod-receiver-0001 --value $2
    reset_cache prod_receiver
}
function listProdSecrets() {
     cache_command prod_receiver az keyvault secret list --vault-name kv-prod-receiver-0001 --query "[].name" -o tsv
}
function showProdSecret() {
    az keyvault secret show --vault-name kv-prod-receiver-0001 --name $1 --query value --output tsv
}


## PPP
### Receiver Test
function listTestSecretsPPP() {
    cache_command test_ppp az keyvault secret list --vault-name kv-test-ppp-0001 --query "[].name" -o tsv
}
function showTestSecretPPP() {
    az keyvault secret show --vault-name kv-test-ppp-0001 --name $1 --query value --output tsv
}
function setTestSecretPPP() {
    az keyvault secret set  --name $1 --vault-name kv-test-ppp-0001 --value $2
    reset_cache test_ppp
}

### Receiver Accept
function listAcceptSecretsPPP() {
    cache_command accept_ppp az keyvault secret list --vault-name kv-accept-ppp-0001 --query "[].name" -o tsv
}
function showAcceptSecretPPP() {
    az keyvault secret show --vault-name kv-accept-ppp-0001 --name $1 --query value --output tsv
}
function setAcceptSecretPPP() {
    az keyvault secret set  --name $1 --vault-name kv-accept-ppp-0001 --value $2
    reset_cache accept_ppp
}

### Receiver Prod
function setProdSecretPPP() {
    az keyvault secret set  --name $1 --vault-name kv-prod-ppp-0001 --value $2
    reset_cache prod_ppp
}
function listProdSecretsPPP() {
     cache_command prod_ppp az keyvault secret list --vault-name kv-prod-ppp-0001 --query "[].name" -o tsv
}
function showProdSecretPPP() {
    az keyvault secret show --vault-name kv-prod-ppp-0001 --name $1 --query value --output tsv
}


## AVRO

function listAvroSecrets() {
    cache_command avro_secrets az keyvault secret list --vault-name kv-test-avromd-0001 --query "[].name" -o tsv
}
function setAvroSecret() {
    az keyvault secret set  --name $1 --vault-name kv-test-avromd-0001 --value $2
    reset_cache avro_secrets
}
function showAvroSecret() {
    az keyvault secret show --vault-name kv-test-avromd-0001 --name $1 --query value --output tsv
}
_showSecret_completions() {
    local cur="${words[CURRENT]}"
    # Determine which function to call based on the first argument
    local cmd="${words[1]}"
    # Note this convention: "showAcceptSecret" → "listAcceptSecrets"
    local listFunction="list${cmd#show}s"  # Transforms "showAcceptSecret" → "listAcceptSecrets"

    # Call the correct function to get cached secrets
    local secrets=("${(@f)$($listFunction)}")


    # Use `compadd` to provide the list for Zsh completion
    compadd -- "${secrets[@]}"
}

# Register for multiple commands
compdef _showSecret_completions showTestSecret showAcceptSecret showProdSecret showAcceptSecretCS showProdSecretCS showAvroSecret showTestSecretPPP showAcceptSecretPPP showProdSecretPPP 

function listAcceptSecretsCS() {
    cache_command accept_consumer_services az keyvault secret list --vault-name kv-accept-cs-svc-0001 --query "[].name" -o tsv
}
function showAcceptSecretCS () {
    az keyvault secret show --vault-name kv-accept-cs-svc-0001 --name $1 --query value --output tsv
}


function setAcceptSecretCS() {
    az keyvault secret set  --name $1 --vault-name kv-accept-cs-svc-0001 --value $2
    reset_cache accept_consumer_services
}


## END azure functions


# Function to format log output
format_logs() {
    jq -rR 'fromjson? | select(.type=="application-log") | ."@timestamp" + (" - " + .level + " - " + .message + .stack_trace)'
}

function showImage() {
    jq '.. | select(type=="object") | select(.image != null) | .image'
}

# Create a global alias FL that can be used anywhere in the command
alias -g FL='| format_logs'
alias -g SI=' -o json | showImage'
alias -g L S="-o yaml | bat -p -l yaml"
alias cat="bat -pp"

#zstyle ':completion:*' fzf-search-display true

## ASDF java env:
. ~/.asdf/plugins/java/set-java-home.zsh

export JAVA_8_HOME=/Users/jgordijn/.asdf/installs/java/zulu-8.62.0.19/zulu-8.jdk/Contents/Home
export JAVA_11_HOME=/Users/jgordijn/.asdf/installs/java/zulu-11.64.19
export JAVA_17_HOME=/Users/jgordijn/.asdf/installs/java/zulu-17.40.19/zulu-17.jdk/Contents/Home
export JAVA_11_HOME=/Users/jgordijn/.asdf/installs/java/zulu-11.64.19/zulu-11.jdk/Contents/Home
export JAVA_21_HOME=/Users/jgordijn/.asdf/installs/java/temurin-21.0.3+9.0.LTS
export JAVA_GRAALVM17_HOME=/Users/jgordijn/.asdf/installs/java/graalvm-community-17.0.9/

# Env variables for read only Kafka registry:
export CONFLUENT_ACCEPT_USERNAME="messaging-definitions-local"
export CONFLUENT_ACCEPT_SECRET="JeHSxc7C2m6iKrLiZRcMf3Ks23yO0y"
export CONFLUENT_PROD_USERNAME="messaging-definitions-local"
export CONFLUENT_PROD_SECRET="TX1mvwX5qsQIaIIX1XktdYO0XqSDS3"



enable-fzf-tab
#zstyle ':fzf-tab:*' fzf-command ftb-tmux-popup


#THIS MUST BE AT THE END OF THE FILE FOR SDKMAN TO WORK!!!
export SDKMAN_DIR="$HOME/.sdkman"
[[ -s "$HOME/.sdkman/bin/sdkman-init.sh" ]] && source "$HOME/.sdkman/bin/sdkman-init.sh"


POWERLEVEL9K_MODE='nerdfont-complete'




